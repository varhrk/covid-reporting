{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df-reporting-covid"
		},
		"tr_population_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/5e1ce86c-6aba-47f6-b127-f3df6d7dce0d/resourceGroups/covid-reporting-RG/providers/Microsoft.Storage/storageAccounts/covidreportingblobe"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow hospital admisiion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Ds_hospital_admissions",
								"type": "DatasetReference"
							},
							"name": "hospitaladmisiionRaw"
						},
						{
							"dataset": {
								"referenceName": "Ds_date_dim",
								"type": "DatasetReference"
							},
							"name": "datedim"
						},
						{
							"dataset": {
								"referenceName": "Ds_country_code_dim",
								"type": "DatasetReference"
							},
							"name": "countrydim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_daily_trnsform_hospital_processed",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DS_daily_trnsform_hospital_processed",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "lookup3"
						},
						{
							"name": "select3"
						},
						{
							"name": "split1"
						},
						{
							"name": "pivot1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "select4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregatedimdate"
						},
						{
							"name": "pivot2"
						},
						{
							"name": "join1"
						},
						{
							"name": "select5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          indicator as string,",
						"          date as date,",
						"          year_week as string,",
						"          value as double,",
						"          source as string,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> hospitaladmisiionRaw",
						"source(output(",
						"          date_key as string,",
						"          date as string,",
						"          year as string,",
						"          month as string,",
						"          day as string,",
						"          day_name as string,",
						"          day_of_year as string,",
						"          week_of_month as string,",
						"          week_of_year as string,",
						"          month_name as string,",
						"          year_month as string,",
						"          year_week as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> datedim",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> countrydim",
						"hospitaladmisiionRaw select(mapColumn(",
						"          country,",
						"          indicator,",
						"          reported_date = date,",
						"          year_week,",
						"          value,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, countrydim lookup(select1@country == countrydim@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup3",
						"lookup3 select(mapColumn(",
						"          country = select1@country,",
						"          indicator,",
						"          reported_date,",
						"          reported_year_week = year_week,",
						"          value,",
						"          source,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 split(indicator=='Daily hospital occupancy'||indicator=='Daily ICU occupancy',",
						"     disjoint: false) ~> split1@(DAILY, WEEKLY)",
						"split1@DAILY pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          reported_date,",
						"          population,",
						"          source),",
						"     pivotBy(indicator, ['Daily ICU occupancy', 'Daily hospital occupancy']),",
						"     count = sum(value),",
						"     columnNaming: '$N_$V',",
						"     lateral: true) ~> pivot1",
						"pivot1 sort(asc(country, true)) ~> sort1",
						"sort1 select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          {count_Daily ICU occupancy},",
						"          {count_Daily hospital occupancy},",
						"          population,",
						"          reported_date,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"datedim derive(ecdc_week = year+'-W'+lpad(week_of_year, 2,'0')) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(ecdc_week),",
						"     week_start_date = min(date),",
						"          week_end_date = max(date)) ~> aggregatedimdate",
						"join1 pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          week_start_date,",
						"          week_end_date,",
						"          population,",
						"          source,",
						"          reported_year_week),",
						"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
						"     count = sum(value),",
						"     columnNaming: '$N_$V',",
						"     lateral: true) ~> pivot2",
						"split1@WEEKLY, aggregatedimdate join(reported_year_week == ecdc_week,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"pivot2 select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_year_week,",
						"          reported_week_start_date = week_start_date,",
						"          reported_week_end_date = week_end_date,",
						"          new_hospital_occupancy_count = {count_Weekly new hospital admissions per 100k},",
						"          new_icu_occupancycount = {count_Weekly new ICU admissions per 100k},",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          population as string,",
						"          {count_confirmed cases} as string,",
						"          count_deaths as string,",
						"          reported_date as string,",
						"          source as string",
						"     ),",
						"     partitionFileNames:['daily_popuation'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"select5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          population as string,",
						"          {count_confirmed cases} as string,",
						"          count_deaths as string,",
						"          reported_date as string,",
						"          source as string",
						"     ),",
						"     partitionFileNames:['weekly_hospital'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_death_cases')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow death cases",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow death cases",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"dimcountry": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_hospital_admissions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow hospital admisiion",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow hospital admisiion",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"hospitaladmisiionRaw": {},
									"datedim": {},
									"countrydim": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow hospital admisiion')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_http_ecdc_schedule')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_http_data_2_raw_folder",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-04-08T00:50:00",
						"endTime": "2025-04-08T19:24:31",
						"timeZone": "India Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								0
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_population')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Population_copy",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/population/blobs/population_by_age.tsv.gz",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('tr_population_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		}
	]
}